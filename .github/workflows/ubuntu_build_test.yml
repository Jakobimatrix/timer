name: C/C++ CI

on:
  push:
    branches: [ main, dev, master, release ]
  pull_request:
    branches: [ main, dev, master, release ]


jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ github.run_id }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Create workspace tar (exclude .git and IDE stuff)
        run: |
          touch workspace.tar
          touch workspace.tar.gz
          tar --exclude='workspace.tar.gz' --exclude='workspace.tar' --exclude-vcs --exclude='**/.idea' --exclude='**/.vscode' --exclude='**/*.log' -cf workspace.tar .
          tar --append -f workspace.tar .git
          gzip -f workspace.tar

      - uses: actions/upload-artifact@v4
        with:
          name: workspace
          path: workspace.tar.gz
          retention-days: 1


  shellcheck:
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      failed: ${{ steps.shell_result.outputs.failed }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .

      - run: tar -xzf workspace.tar.gz -C .

      - name: Install environment
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - id: shell_result
        run: |
          set +e
          ./initRepo/scripts/checkShellCheck.sh
          rc=$?
          echo "failed=$( [ $rc -ne 0 ] && echo true || echo false)" >> $GITHUB_OUTPUT
          exit 0

  clang_format:
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      failed: ${{ steps.format_result.outputs.failed }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .

      - run: tar -xzf workspace.tar.gz -C .

      - name: Install environment
        run: |
          set -e
          source initRepo/.environment || exit 1
          if [ -f .environment ]; then source .environment; fi
          sudo apt-get install -y clang-format-${CLANG_FORMAT_VERSION}
          source initRepo/scripts/ensureToolVersion.sh || exit 1
          ensure_tool_versioned clang-format "${CLANG_FORMAT_VERSION}"

      - id: format_result
        run: |
          set +e
          ./initRepo/scripts/checkClangFormat.sh
          rc=$?
          echo "failed=$( [ $rc -ne 0 ] && echo true || echo false)" >> $GITHUB_OUTPUT
          exit 0

  gcc_compile:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .

      - run: tar -xzf workspace.tar.gz -C .

      - name: Install environment
        run: |
          set -e
          source initRepo/.environment || exit 1
          if [ -f .environment ]; then source .environment; fi
          sudo apt-get install -y gcc-${GCC_VERSION} g++-${GCC_VERSION}
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${GCC_VERSION} 100 || true
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${GCC_VERSION} 100 || true
          source initRepo/scripts/ensureToolVersion.sh || exit 1
          ensure_tool_versioned g++ "${GCC_VERSION}"
          ensure_tool_versioned gcc "${GCC_VERSION}"

      - name: Run GCC build
        run: |
          set +e
          ./initRepo/scripts/build.sh -c -d -t --compiler gcc
          ./initRepo/scripts/build.sh -c -r -t --compiler gcc


  clang_compile:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .

      - run: tar -xzf workspace.tar.gz -C .

      - run: |
          if [ -f clang_debug_build.tar.gz ]; then
            tar -xzf clang_debug_build.tar.gz -C .
          fi

      - name: Install environment
        run: |
          set -e
          source initRepo/.environment || exit 1
          if [ -f .environment ]; then source .environment; fi
          sudo apt-get install -y clang-${CLANG_VERSION} lld
          if ! command -v ld.lld &>/dev/null; then
            sudo ln -s /usr/bin/ld.lld-${CLANG_VERSION} /usr/bin/ld.lld || true
          fi
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${CLANG_VERSION} 100 || true
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${CLANG_VERSION} 100 || true
          source initRepo/scripts/ensureToolVersion.sh || exit 1
          ensure_tool_versioned clang++ "${CLANG_VERSION}"
          ensure_tool_versioned clang "${CLANG_VERSION}"

      - name: Run Clang builds
        run: |
          set +e
          ./initRepo/scripts/build.sh -c -d -t --compiler clang
          ./initRepo/scripts/build.sh -d -f --compiler clang
          ./initRepo/scripts/build.sh -c -r -t --compiler clang
          ./initRepo/scripts/build.sh -r -f --compiler clang
          
      - name: Update Workspace for clang-tidy
        run: |
          if [ -d "build-clang-${CLANG_VERSION}-debug" ]; then
            tar -czf clang_debug_build.tar.gz build-clang-${CLANG_VERSION}-debug
            echo "uploaded=true" >> $GITHUB_OUTPUT
          else
            echo "uploaded=false" >> $GITHUB_OUTPUT
          fi

          exit 0

  clang_tidy:
    runs-on: ubuntu-latest
    needs: [setup, clang_compile]
    outputs:
      failed: ${{ steps.tidy_result.outputs.failed }}
      uploaded: ${{ steps.upload_art.outputs.uploaded }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .

      - run: tar -xzf workspace.tar.gz -C .

      - name: Install environment
        run: |
          set -e
          source initRepo/.environment || exit 1
          if [ -f .environment ]; then source .environment; fi
          sudo apt-get install -y clang-tidy-${CLANG_TIDY_VERSION}
          source initRepo/scripts/ensureToolVersion.sh || exit 1
          ensure_tool_versioned clang-tidy "${CLANG_TIDY_VERSION}"

      - id: tidy_result
        run: |
          set +e
          ./initRepo/scripts/checkClangTidy.sh
          rc=$?
          echo "failed=$( [ $rc -ne 0 ] && echo true || echo false)" >> $GITHUB_OUTPUT


      - id: upload_art
        if: steps.tidy_result.outputs.uploaded == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: clang-debug-build
          path: clang_debug_build.tar.gz
          retention-days: 1
          
  finalize:
    runs-on: ubuntu-latest
    needs: [shellcheck, clang_format, clang_tidy, gcc_compile, clang_compile]
    if: always()
    steps:
      - run: |
          echo "Summary of results:"
          failed=false

          if [ "${{ needs.shellcheck.outputs.failed }}" = "true" ]; then failed=true; echo " - shellcheck: FAILED"; else echo " - shellcheck: OK"; fi
          if [ "${{ needs.clang_format.outputs.failed }}" = "true" ]; then failed=true; echo " - clang-format: FAILED"; else echo " - clang-format: OK"; fi
          if [ "${{ needs.clang_tidy.outputs.failed }}" = "true" ]; then failed=true; echo " - clang-tidy: FAILED"; else echo " - clang-tidy: OK"; fi
          if [ "${{ needs.gcc_compile.result }}" != "success" ]; then failed=true; echo " - gcc builds: FAILED"; else echo " - gcc builds: OK"; fi
          if [ "${{ needs.clang_compile.result }}" != "success" ]; then failed=true; echo " - clang builds: FAILED"; else echo " - clang builds: OK"; fi

          if $failed; then exit 1; fi
